Note: qemu is an emulator, not a semantic disassembler
this means that the microcode instructions are aimed at fast and efficient emulation,
and not so much understanding the underlying code.
(on the other hand, "understanding" for a CPU means being able to emulate in the first place)
one concrete example is the handling of conditions / flags
we have to work around it

- Holy shit: on x86, PC is not a global
  EIP is stored as simply mem[env+0x80]
     st_i64 tmp4,env,$0x80

  Need to store globals as "offset into env" everywhere

    movi_i32 pc,$0x1004  ->
    st_i64 tmp4,env,$0x80

  How to parse (target specific) CPUArchState structure into list of offsets/field names?

- Generate normal make file

- Use ELF hwcap flags for CPU features, this is possible for at least
    ARM : ARM_HWCAP_*
    SPARC : HWCAP_SPARC_*
    unicore: UC32_hwcap
    HWCAP_I386_
  (see elfload.c)
  where can I find all these?

- Thread safety: add global lock?

- Try to combine changes for TCG_PYTHON into one include file as much as possible

- Keep the interface platform independent
- Allow getting some info about the target cpu from the interface:
  register names
  PC register
  SP register
  calling convention? (probably not available within qemu)

- Use the official way of instantiating CPUs?
  Might bring a lot of unneeded code, but on the other hand automates feature setting for a model
  And would also add support for non-standard coprocessors
  Currently have to copy a lot of code from cpu.c

- generic interface:
  list of token, value pairs -> CPU feature flags
  list of token, value pairs -> TB flags / options

- helpers, in LLVM?   s2e has these somewhere
  built in s2e/tools/lib/X86Translator/X86BitcodeLibrary

  lazy evaluation of flags in x86
    // this cc_op stuff is pretty crazy for x86
    // in that evaluation of flags is "lazy"
    // this makes sense for emulation, but makes our life harder
    // due to single stepping we will always generate CC_OP_DYNAMIC, which
    // causes a helper function call to be generated (compute_eflags_c)
    // when the condition is used.
    //
    // so eventually it makes sense to support generating a whole block at a time
    // to allow for static inference of these flags
    //
    // on the other hand these calls may make decompilation easier
    //
    // we'd really like to have the helpers source in some intermediate language too!

- target dependent defines:
  TARGET_LONG_BITS      Client word size. This is different for arm, i386, ...
  TCG_TARGET_REG_BITS   Target word size (must be identical to pointer size of host machine).

  Does this mean we have to build tcg twice? one for 32 bits, once for 64 bits. Or just keep it with
  the target-specific objects, this may be easier; but how to prevent symbol collisions?

- merge target-specific sources into one object with controlled interface
  - internal global state
  - make one global TCG context and CPU state and keep it at that
  - thread safety: need a lock
  - access to the produced data (context, generated tcg code) is not dependent on the target word size
  - each target has its own TCG context and Arch state

- tcg: there is no way to free the context again, even though memory is allocated for it
   labels and temps are limited, though (TCG_MAX_TEMPS / TCG_MAX_LABELS)
   TCGArgContraints
 these are not platform specific, but per TCG op (and only used for code generation / register allocation, which we don't do)
   Removed this allocation for TCG_PYTHON
 helpers is also dynamically allocated
 best to make one context and keep it at that

- iargs input args   register / global / local
  oargs output args  register / global / local
  what are cargs?  constant args (implicit)

- test on 32 bit Python/host
  especially with 64 bit target
  make sure output is still in single 64 bit words

- default instruction flags
  INITIAL_IFLAGS (mode/llvm subtarget)

  ARM: 
    arm: (1 << INST_ARM_VFPEN_MASK)
    thumb: (1 << INST_ARM_THUMB_SHIFT) | (1 << INST_ARM_VFPEN_MASK)
  i386: 64 addr / 64 reg
    bit32: (1 << HF_PE_SHIFT) | (1 << HF_CS32_SHIFT) | (1 << HF_SS32_SHIFT)
    bit64: (1 << HF_PE_SHIFT) | (1 << HF_CS32_SHIFT) | (1 << HF_SS32_SHIFT) | (1 << HF_CS64_SHIFT) | (1 << HF_LMA_SHIFT)

  other flags influence the generated instructions as well:
    for ARM, these are VECLEN, VECSTRIDE, CONDEXEC, PRIV, VFPEN, BSWAP_CODE

    BSWAP_CODE -> is simply the endian (as compared to current endian), general flag (this should be normalized so it's the same on little endian archs)
    VFPEN -> always enable, makes no sense to disable
    USER -> not sure

- disable CONFIG_USER_ONLY?
   could be useful to support privileged instructions

    need platform-independent way to compute instruction flag and pc changes from env change instructions
    maybe add a virtual global for the instruction flags?

- output is_call / is_return flags

  normalized instruction category type
  (see S2E)
  return, call, ...
  getType() TB_CALL_IND TB_JMP TB_DEFAULT ... TB_RET
  (has patched qemu to return special output, like is_jmp but also marks CALLs)
  This is what we need too... and a way to return it from translation (ie, put it in context)

also this would be useful:
  #define DISAS_NEXT    0 /* next instruction can be analyzed */
  #define DISAS_JUMP    1 /* only pc was modified dynamically */
  #define DISAS_UPDATE  2 /* cpu state was modified dynamically */
  #define DISAS_TB_JUMP 3 /* only pc was modified statically */
  arm specific:
  #define DISAS_WFI 4
  #define DISAS_SWI 5

  (qemu translate arm has s->is_jmp: DISAS_UPDATE, DISAS_SWI, )
These can be determined from the generated code:
  goto_tb 1 -> DISAS_NEXT (within basic block)
  exit_tb 0 -> DISAS_JUMP / DISAS_UPDATE
  goto_tb 0, dest -> DISAS_TB_JUMP

However, iscall/isreturn cannot

- move is_valid_pc(pc, iflags) into qdis
    Check if pc is a valid instruction location, given instruction flags
    iflag.
    Checks alignment etc...

- cpu_get_tb_cpu_state
  gets state from cpu environment, produces TB flags and PC
  -> need to symbolically compile this
     so that we can derive modified TB flags from instructions that modify the env

- PC/SP
  -> can return global as well as offset into state
  PC_STATE_OFFSET
  PC_GLOBAL
  SP_STATE_OFFSET
  SP_GLOBAL
  ...

TODO before release:
- return instruction size (address after parsing instruction)? this is useful for showing the user the instruction in hex
  also in the case of call instructions this signifies the return address (how does S2E handle this?)
  LLVM already does this.

- rename TGT to ARCH. Target is a confusing word within qemu lingo.
  rename OPTIMIZE to OPT. These are specific options, not only optimizations.

======================================================================================
Done:
- force TCG_TARGET_REG_BITS to 64; for analysis it makes no sense to make anything depend on the host arch register size
  don't generate 32-bit compatibility instructions when disassembling 64 bit code on a 32 bit host 

- softfloat.c: why do we need this? just for defines?

- ops numbers are the same for 32/64 bit (luckily)
  define ops in external interface (and for python)

- Support multiple platforms in one module
  Allow disassembling x86 as well as ARM as well as MIPS/sparc/ppc etc
  By linking the various translate.c's and CPU definitions

  Disassembler(platform)    (and endian? and sub-platform options such as arm/thumb mode, platform specific info; may be have a constructor per platform? )
  disassembler(buffer, pc)

  Just give a PC and buffer with the native instruction and it returns a list of TCG instructions for
  that instruction (without the nops).
  (or maybe also add option to process a whole block at once?)

- dump globals

  seems that temps[] holds the globals as well as the locals/temps
  temps[i] where i < nb_globals is a global
  TCGTemp structure
    has a name and many other properties
- dump ops (tcg_op_defs)
